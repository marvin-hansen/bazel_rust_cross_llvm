module(
    name = "hello_cross",
    version = "0.0.0",
)

###############################################################################
# B A Z E L   D E P E N D E N C I E S # https://registry.bazel.build/
###############################################################################

bazel_dep(name = "rules_rust", version = "0.51.0")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "toolchains_llvm", version = "1.2.0", dev_dependency = True)
bazel_dep(name = "toolchains_musl", version = "0.1.20", dev_dependency = True)

# https://github.com/brainhivenl/libpq
bazel_dep(name = "libpq", version = "0.0.1")
git_override(
    module_name = "libpq",
    commit = "ebdeb0cc9b8e051779e00b37ec0f93fab9ba8dd8",
    remote = "https://github.com/brainhivenl/libpq",
)

###############################################################################
# Small LLVM toolchain #
# https://github.com/MaterializeInc/toolchains/releases/
###############################################################################

# Here we set only a host toolchain for Apple Silicon and Linux on X86/64.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_version = "18.1.8",
    sha256 = {
        # Generate checksums with shasum -a 256 filename.tar.zst
        "darwin-aarch64": "",
        "darwin-x86_64": "",
        "linux-x86_64": "",
        "linux-x86_64": "",
    },
    stdlib = {
        "linux-x86_64": "stdc++",
        "linux-aarch64": "stdc++",
    },
    urls = {
        "darwin-aarch64": ["https://github.com/MaterializeInc/toolchains/releases/download/clang-18.1.8-4/darwin_aarch64.tar.zst"],
        "darwin-x86_64": ["https://github.com/MaterializeInc/toolchains/releases/download/clang-18.1.8-4/darwin_x86_64.tar.zst"],
        "linux-aarch64": ["https://github.com/MaterializeInc/toolchains/releases/download/clang-18.1.8-4/linux_aarch64.tar.zst"],
        "linux-x86_64": ["https://github.com/MaterializeInc/toolchains/releases/download/clang-18.1.8-4/linux_x86_64.tar.zst"],
    },
)

# No LLVM sysroots are required since we use MUSL to cross compile.
# Notice, the Rust target triplets have been changed to MUSL targets.

use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

register_toolchains("@llvm_toolchain//:all")

###############################################################################
# Rust toolchain #
###############################################################################
RUST_EDITION = "2021"  # NOTE: 2024 will be released with Rust 1.86.0

RUST_VERSION = "1.81.0"

# https://github.com/bazelbuild/rules_rust/releases
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = RUST_EDITION,
    extra_target_triples = [
        "x86_64-unknown-linux-musl",
        "aarch64-unknown-linux-musl",
    ],
    versions = [RUST_VERSION],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# Rust dependencies are vendored; see:
# //thirdparty/BUILD.bazel