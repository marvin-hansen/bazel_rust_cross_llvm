load("@rules_oci//oci:defs.bzl", "oci_push")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_doc", "rust_doc_test")
load("//:build/binary.bzl", "build_binary_opt")
load("//:build/container.bzl", "build_multi_arch_image", "tag_with_commit_and_timestamp")

###############################################################################
# This setting is needed for release mode compiler optimization
###############################################################################
config_setting(
    name = "release",
    values = {
        "compilation_mode": "opt",
    },
)

###############################################################################
# Rust Binary
###############################################################################
package(default_visibility = ["//visibility:public"])

filegroup(
    name = "all",
    srcs = [
        ":hello_world_aarch64",
        ":hello_world_host",
        ":hello_world_x86_64",
    ],
)

rust_binary(
    name = "hello_world_host",
    srcs = ["src/main.rs"],
    deps = [
        # External crates
        "//thirdparty/crates:mimalloc",
        "//thirdparty/crates:lz4-sys",
        "//thirdparty/crates:diesel",
        "//thirdparty/crates:tokio",
    ],
)

rust_binary(
    name = "hello_world_x86_64",
    srcs = ["src/main.rs"],
    platform = "//build/platforms:linux-x86_64",
    deps = [
        # External crates
        "//thirdparty/crates:mimalloc",
        "//thirdparty/crates:lz4-sys",
        "//thirdparty/crates:diesel",
        "//thirdparty/crates:tokio",
    ],
)

rust_binary(
    name = "hello_world_aarch64",
    srcs = ["src/main.rs"],
    platform = "//build/platforms:linux-aarch64",
    deps = [
        # External crates
        "//thirdparty/crates:mimalloc",
        "//thirdparty/crates:lz4-sys",
        "//thirdparty/crates:diesel",
        "//thirdparty/crates:tokio",
    ],
)

###############################################################################
# Documentation
###############################################################################
# Only generate the docs once for the host platform.
rust_doc(
    name = "doc",
    crate = ":hello_world_host",
    tags = ["doc"],
    visibility = ["//visibility:public"],
)

rust_doc_test(
    name = "doc_test",
    crate = ":hello_world_host",
    tags = ["doc-test"],
    visibility = ["//visibility:public"],
)

###############################################################################
# Tests
###############################################################################

# Test if the host binary works.
# Note, we cannot test for platform since Bazel determines the host platform automatically
sh_test(
    name = "test_hello_world_host",
    srcs = ["test_hello_world.sh"],
    args = [
        "$(rlocationpath :hello_world_host)",
    ],
    data = [
        ":hello_world_host",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

# Test the for x86_64 architecture
sh_test(
    name = "test_linux_x86_64",
    srcs = ["test_platform.sh"],
    args = [
        "$(rootpath :hello_world_x86_64)",
        "x86_64",
    ],
    data = [
        ":hello_world_x86_64",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

# Test for ARM architecture
sh_test(
    name = "test_linux_arm64",
    srcs = ["test_platform.sh"],
    args = [
        "$(rootpath :hello_world_aarch64)",
        "aarch64",
    ],
    data = [
        ":hello_world_aarch64",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

###############################################################################
# OCI Container Image
###############################################################################

# Note, build_multi_arch_image uses platform transition internally so you only
# need to declare a binary once for the host platform and this rule does all the heavy lifting for you
# to create a new binary for each platform and stuff them all into a proper multi-arch OCI image.
build_multi_arch_image(
    name = "image_index",
    srcs = ["hello_world_host"],
    base = "//images/base_image",
    entry_point = "hello_world_host",
    exposed_ports = [
        "8080",
    ],
    platforms = [
        "//build/platforms:linux-x86_64",
        "//build/platforms:linux-aarch64",
    ],
    visibility = ["//visibility:public"],
)

# Tag example: 458b6779-1729045897
# This tag format is unique, immutable, and sortable
# because some CI systems (i.e. FluxCD) require sortable image tags.
tag_with_commit_and_timestamp(
    name = "remote_tag",
    target = ":image_index",
)

oci_push(
    name = "push",
    image = ":image_index",
    remote_tags = ":remote_tag",
    repository = "myregistry/myrepo/hello_world_multiarch",
    visibility = ["//visibility:public"],
)
